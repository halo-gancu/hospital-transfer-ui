from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, send_from_directory
from flask_socketio import SocketIO, emit
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os
from datetime import datetime, timedelta
import secrets

app = Flask(__name__)

# ============================================
# セッション設定
# ============================================
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', secrets.token_hex(32))
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=8)
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
app.config['SESSION_COOKIE_SECURE'] = False  # ローカル開発環境用（HTTPSの場合はTrue）
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_NAME'] = 'hospital_session'

socketio = SocketIO(app, cors_allowed_origins="*")

DATABASE = os.environ.get('DATABASE_PATH', 'hospital_data.sqlite3')

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """データベースの初期化"""
    conn = get_db_connection()
    
    # usersテーブル
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            role TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # password_reset_tokensテーブル
    conn.execute('''
        CREATE TABLE IF NOT EXISTS password_reset_tokens (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            token TEXT UNIQUE NOT NULL,
            expires_at TIMESTAMP NOT NULL,
            used INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    conn.commit()
    conn.close()
    print("✅ データベーステーブルを初期化しました")

# アプリケーション起動時にデータベースを初期化
init_db()

# ============================================
# 認証チェック用デコレータ
# ============================================
def login_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            print(f"❌ 未認証アクセス: {request.path}")
            return redirect(url_for('login'))
        print(f"✅ 認証済みアクセス: user_id={session.get('user_id')}, path={request.path}")
        return f(*args, **kwargs)
    return decorated_function

# ============================================
# ルート定義
# ============================================

@app.route('/')
@login_required
def index():
    """メインページ"""
    print(f"📄 メインページ表示: user={session.get('username')}, role={session.get('role')}")
    return send_from_directory('.', 'index.html')

# 静的ファイルの提供
@app.route('/css/<path:filename>')
def serve_css(filename):
    return send_from_directory('css', filename)

@app.route('/js/<path:filename>')
def serve_js(filename):
    return send_from_directory('js', filename)

@app.route('/login', methods=['GET', 'POST'])
def login():
    # 既にログイン済みの場合はメインページへ
    if 'user_id' in session:
        print(f"✅ 既にログイン済み: user_id={session.get('user_id')}")
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        print(f"🔍 ログイン試行: username={username}")
        
        if not username or not password:
            flash('ユーザー名とパスワードを入力してください。')
            return render_template('login.html')
        
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        conn.close()
        
        if user:
            print(f"🔍 ユーザー発見: id={user['id']}, username={user['username']}, role={user['role']}")
            
            if check_password_hash(user['password'], password):
                print(f"✅ パスワード検証成功")
                
                # セッションをクリアして新規設定
                session.clear()
                
                # セッション情報を設定
                session['user_id'] = user['id']
                session['username'] = user['username']
                session['role'] = user['role']
                session.permanent = True  # 永続セッションを有効化
                
                print(f"✅ セッション設定完了:")
                print(f"   - user_id: {session.get('user_id')}")
                print(f"   - username: {session.get('username')}")
                print(f"   - role: {session.get('role')}")
                print(f"   - permanent: {session.permanent}")
                
                flash('ログインに成功しました。', 'success')
                return redirect(url_for('index'))
            else:
                print(f"❌ パスワード検証失敗")
                flash('ユーザー名またはパスワードが正しくありません。')
        else:
            print(f"❌ ユーザーが見つかりません: username={username}")
            flash('ユーザー名またはパスワードが正しくありません。')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    username = session.get('username', 'Unknown')
    session.clear()
    print(f"👋 ログアウト: user={username}")
    flash('ログアウトしました。')
    return redirect(url_for('login'))

# パスワードリセット申請ページ
@app.route('/reset-password-request', methods=['GET', 'POST'])
def reset_password_request():
    if request.method == 'POST':
        email = request.form.get('email')
        
        if not email:
            return render_template('reset_password_request.html', 
                                 error='メールアドレスを入力してください。')
        
        # ユーザーが存在するか確認
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()
        conn.close()
        
        if user:
            # トークンを生成
            token = secrets.token_urlsafe(32)
            expires_at = datetime.now() + timedelta(hours=1)  # 1時間有効
            
            # トークンをデータベースに保存
            conn = get_db_connection()
            conn.execute('''
                INSERT INTO password_reset_tokens (user_id, token, expires_at)
                VALUES (?, ?, ?)
            ''', (user['id'], token, expires_at))
            conn.commit()
            conn.close()
            
            # リセットURLを生成
            reset_url = url_for('reset_password', token=token, _external=True)
            
            print(f"🔑 パスワードリセットトークン生成: user={user['username']}, token={token[:10]}...")
            
            return render_template('reset_password_request.html', 
                                 success=f'パスワードリセットリンクをメールで送信しました。<br>（開発中のため、リンクを表示: <a href="{reset_url}">{reset_url}</a>）')
        else:
            # セキュリティのため、ユーザーが存在しない場合も同じメッセージを表示
            return render_template('reset_password_request.html', 
                                 success='パスワードリセットリンクをメールで送信しました。（登録されている場合）')
    
    return render_template('reset_password_request.html')

# パスワード変更ページ
@app.route('/reset-password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    # トークンを検証
    conn = get_db_connection()
    reset_token = conn.execute('''
        SELECT * FROM password_reset_tokens 
        WHERE token = ? AND expires_at > ? AND used = 0
    ''', (token, datetime.now())).fetchone()
    
    if not reset_token:
        conn.close()
        print(f"❌ 無効なトークン: {token[:10]}...")
        return render_template('reset_password.html', 
                             error='無効または期限切れのリンクです。', token=token)
    
    if request.method == 'POST':
        password = request.form.get('password')
        password_confirm = request.form.get('password_confirm')
        
        # パスワードの検証
        if not password or not password_confirm:
            conn.close()
            return render_template('reset_password.html', 
                                 error='パスワードを入力してください。', token=token)
        
        if len(password) < 8:
            conn.close()
            return render_template('reset_password.html', 
                                 error='パスワードは8文字以上である必要があります。', token=token)
        
        if password != password_confirm:
            conn.close()
            return render_template('reset_password.html', 
                                 error='パスワードが一致しません。', token=token)
        
        # パスワードをハッシュ化して更新
        hashed_password = generate_password_hash(password)
        conn.execute('UPDATE users SET password = ? WHERE id = ?', 
                    (hashed_password, reset_token['user_id']))
        
        # トークンを使用済みにする
        conn.execute('UPDATE password_reset_tokens SET used = 1 WHERE id = ?', 
                    (reset_token['id'],))
        conn.commit()
        
        # ユーザー情報を取得
        user = conn.execute('SELECT username FROM users WHERE id = ?', 
                          (reset_token['user_id'],)).fetchone()
        conn.close()
        
        print(f"✅ パスワードリセット成功: user={user['username']}")
        
        flash('パスワードが正常に変更されました。新しいパスワードでログインしてください。', 'success')
        return redirect(url_for('login'))
    
    conn.close()
    return render_template('reset_password.html', token=token)

# ============================================
# API エンドポイント
# ============================================

@app.route('/api/session', methods=['GET'])
def api_session():
    """セッション情報を返す（デバッグ用）"""
    return jsonify({
        'logged_in': 'user_id' in session,
        'user_id': session.get('user_id'),
        'username': session.get('username'),
        'role': session.get('role'),
        'permanent': session.permanent
    })

@app.route('/api/users', methods=['GET', 'POST'])
@login_required
def api_users():
    """ユーザー管理API"""
    conn = get_db_connection()
    
    if request.method == 'GET':
        users = conn.execute('SELECT id, username, email, role, created_at FROM users').fetchall()
        conn.close()
        return jsonify([dict(user) for user in users])
    
    elif request.method == 'POST':
        data = request.json
        username = data.get('username')
        password = data.get('password')
        email = data.get('email')
        role = data.get('role', 'user')
        
        if not username or not password or not email:
            conn.close()
            return jsonify({'error': 'Missing required fields'}), 400
        
        if len(password) < 8:
            conn.close()
            return jsonify({'error': 'Password must be at least 8 characters'}), 400
        
        hashed_password = generate_password_hash(password)
        
        try:
            conn.execute('INSERT INTO users (username, password, email, role) VALUES (?, ?, ?, ?)',
                        (username, hashed_password, email, role))
            conn.commit()
            conn.close()
            print(f"✅ ユーザー作成: username={username}, role={role}")
            return jsonify({'message': 'User created successfully'}), 201
        except sqlite3.IntegrityError as e:
            conn.close()
            print(f"❌ ユーザー作成失敗: {str(e)}")
            return jsonify({'error': 'Username or email already exists'}), 400

@app.route('/api/users/<int:user_id>', methods=['PUT', 'DELETE'])
@login_required
def api_user(user_id):
    """個別ユーザー管理API"""
    conn = get_db_connection()
    
    if request.method == 'PUT':
        data = request.json
        
        # 更新するフィールドを構築
        updates = []
        params = []
        
        if 'username' in data:
            updates.append('username = ?')
            params.append(data['username'])
        
        if 'email' in data:
            updates.append('email = ?')
            params.append(data['email'])
        
        if 'role' in data:
            updates.append('role = ?')
            params.append(data['role'])
        
        if 'password' in data and data['password']:
            if len(data['password']) < 8:
                conn.close()
                return jsonify({'error': 'Password must be at least 8 characters'}), 400
            updates.append('password = ?')
            params.append(generate_password_hash(data['password']))
        
        if not updates:
            conn.close()
            return jsonify({'error': 'No fields to update'}), 400
        
        params.append(user_id)
        query = f"UPDATE users SET {', '.join(updates)} WHERE id = ?"
        
        try:
            conn.execute(query, params)
            conn.commit()
            conn.close()
            print(f"✅ ユーザー更新: user_id={user_id}")
            return jsonify({'message': 'User updated successfully'})
        except sqlite3.IntegrityError:
            conn.close()
            return jsonify({'error': 'Username or email already exists'}), 400
    
    elif request.method == 'DELETE':
        conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
        conn.commit()
        conn.close()
        print(f"✅ ユーザー削除: user_id={user_id}")
        return jsonify({'message': 'User deleted successfully'})

# ============================================
# エラーハンドラ
# ============================================

@app.errorhandler(404)
def not_found(error):
    print(f"❌ 404エラー: {request.path}")
    return render_template('login.html'), 404

@app.errorhandler(500)
def internal_error(error):
    print(f"❌ 500エラー: {str(error)}")
    return jsonify({'error': 'Internal server error'}), 500

# ============================================
# アプリケーション起動
# ============================================

if __name__ == '__main__':
    print("\n" + "=" * 60)
    print("🏥 病院情報管理システム サーバー起動中...")
    print("=" * 60)
    print(f"📍 ログインURL: http://localhost:5000/login")
    print(f"💾 データベース: {DATABASE}")
    print(f"🔑 SECRET_KEY: {'設定済み' if app.config['SECRET_KEY'] else '未設定'}")
    print(f"⏰ セッション有効期限: {app.config['PERMANENT_SESSION_LIFETIME']}")
    print("=" * 60 + "\n")
    
    socketio.run(app, debug=True, host='0.0.0.0', port=5000)